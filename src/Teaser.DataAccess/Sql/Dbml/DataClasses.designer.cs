#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Teaser.DataAccess.Sql.Dbml
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Teaser")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    partial void InsertWeek(Week instance);
    partial void UpdateWeek(Week instance);
    partial void DeleteWeek(Week instance);
    partial void InsertLeague(League instance);
    partial void UpdateLeague(League instance);
    partial void DeleteLeague(League instance);
    partial void InsertPick(Pick instance);
    partial void UpdatePick(Pick instance);
    partial void DeletePick(Pick instance);
    partial void InsertProTeam(ProTeam instance);
    partial void UpdateProTeam(ProTeam instance);
    partial void DeleteProTeam(ProTeam instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertRpxUser(RpxUser instance);
    partial void UpdateRpxUser(RpxUser instance);
    partial void DeleteRpxUser(RpxUser instance);
    partial void InsertSiteUser(SiteUser instance);
    partial void UpdateSiteUser(SiteUser instance);
    partial void DeleteSiteUser(SiteUser instance);
    partial void InsertSiteUser_Role(SiteUser_Role instance);
    partial void UpdateSiteUser_Role(SiteUser_Role instance);
    partial void DeleteSiteUser_Role(SiteUser_Role instance);
    partial void InsertTeaserTeam(TeaserTeam instance);
    partial void UpdateTeaserTeam(TeaserTeam instance);
    partial void DeleteTeaserTeam(TeaserTeam instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::Teaser.DataAccess.Properties.Settings.Default.TeaserConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
		
		public System.Data.Linq.Table<Week> Weeks
		{
			get
			{
				return this.GetTable<Week>();
			}
		}
		
		public System.Data.Linq.Table<League> Leagues
		{
			get
			{
				return this.GetTable<League>();
			}
		}
		
		public System.Data.Linq.Table<Pick> Picks
		{
			get
			{
				return this.GetTable<Pick>();
			}
		}
		
		public System.Data.Linq.Table<ProTeam> ProTeams
		{
			get
			{
				return this.GetTable<ProTeam>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<RpxUser> RpxUsers
		{
			get
			{
				return this.GetTable<RpxUser>();
			}
		}
		
		public System.Data.Linq.Table<SiteUser> SiteUsers
		{
			get
			{
				return this.GetTable<SiteUser>();
			}
		}
		
		public System.Data.Linq.Table<SiteUser_Role> SiteUser_Roles
		{
			get
			{
				return this.GetTable<SiteUser_Role>();
			}
		}
		
		public System.Data.Linq.Table<TeaserTeam> TeaserTeams
		{
			get
			{
				return this.GetTable<TeaserTeam>();
			}
		}
	}
	
	[Table(Name="dbo.Game")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _HomeTeamId;
		
		private System.Nullable<int> _AwayTeamId;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<int> _Line;
		
		private System.Nullable<int> _HomeScore;
		
		private System.Nullable<int> _AwayScore;
		
		private System.Nullable<int> _WeekId;
		
		private EntitySet<Pick> _Picks;
		
		private EntityRef<Week> _Week;
		
		private EntityRef<ProTeam> _ProTeam;
		
		private EntityRef<ProTeam> _ProTeam1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnHomeTeamIdChanging(System.Nullable<int> value);
    partial void OnHomeTeamIdChanged();
    partial void OnAwayTeamIdChanging(System.Nullable<int> value);
    partial void OnAwayTeamIdChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnLineChanging(System.Nullable<int> value);
    partial void OnLineChanged();
    partial void OnHomeScoreChanging(System.Nullable<int> value);
    partial void OnHomeScoreChanged();
    partial void OnAwayScoreChanging(System.Nullable<int> value);
    partial void OnAwayScoreChanged();
    partial void OnWeekIdChanging(System.Nullable<int> value);
    partial void OnWeekIdChanged();
    #endregion
		
		public Game()
		{
			this._Picks = new EntitySet<Pick>(new Action<Pick>(this.attach_Picks), new Action<Pick>(this.detach_Picks));
			this._Week = default(EntityRef<Week>);
			this._ProTeam = default(EntityRef<ProTeam>);
			this._ProTeam1 = default(EntityRef<ProTeam>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_HomeTeamId", DbType="Int")]
		public System.Nullable<int> HomeTeamId
		{
			get
			{
				return this._HomeTeamId;
			}
			set
			{
				if ((this._HomeTeamId != value))
				{
					if (this._ProTeam1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHomeTeamIdChanging(value);
					this.SendPropertyChanging();
					this._HomeTeamId = value;
					this.SendPropertyChanged("HomeTeamId");
					this.OnHomeTeamIdChanged();
				}
			}
		}
		
		[Column(Storage="_AwayTeamId", DbType="Int")]
		public System.Nullable<int> AwayTeamId
		{
			get
			{
				return this._AwayTeamId;
			}
			set
			{
				if ((this._AwayTeamId != value))
				{
					if (this._ProTeam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAwayTeamIdChanging(value);
					this.SendPropertyChanging();
					this._AwayTeamId = value;
					this.SendPropertyChanged("AwayTeamId");
					this.OnAwayTeamIdChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_Line", DbType="Int")]
		public System.Nullable<int> Line
		{
			get
			{
				return this._Line;
			}
			set
			{
				if ((this._Line != value))
				{
					this.OnLineChanging(value);
					this.SendPropertyChanging();
					this._Line = value;
					this.SendPropertyChanged("Line");
					this.OnLineChanged();
				}
			}
		}
		
		[Column(Storage="_HomeScore", DbType="Int")]
		public System.Nullable<int> HomeScore
		{
			get
			{
				return this._HomeScore;
			}
			set
			{
				if ((this._HomeScore != value))
				{
					this.OnHomeScoreChanging(value);
					this.SendPropertyChanging();
					this._HomeScore = value;
					this.SendPropertyChanged("HomeScore");
					this.OnHomeScoreChanged();
				}
			}
		}
		
		[Column(Storage="_AwayScore", DbType="Int")]
		public System.Nullable<int> AwayScore
		{
			get
			{
				return this._AwayScore;
			}
			set
			{
				if ((this._AwayScore != value))
				{
					this.OnAwayScoreChanging(value);
					this.SendPropertyChanging();
					this._AwayScore = value;
					this.SendPropertyChanged("AwayScore");
					this.OnAwayScoreChanged();
				}
			}
		}
		
		[Column(Storage="_WeekId", DbType="Int")]
		public System.Nullable<int> WeekId
		{
			get
			{
				return this._WeekId;
			}
			set
			{
				if ((this._WeekId != value))
				{
					if (this._Week.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWeekIdChanging(value);
					this.SendPropertyChanging();
					this._WeekId = value;
					this.SendPropertyChanged("WeekId");
					this.OnWeekIdChanged();
				}
			}
		}
		
		[Association(Name="Game_Pick", Storage="_Picks", ThisKey="Id", OtherKey="GameId")]
		public EntitySet<Pick> Picks
		{
			get
			{
				return this._Picks;
			}
			set
			{
				this._Picks.Assign(value);
			}
		}
		
		[Association(Name="Week_Game", Storage="_Week", ThisKey="WeekId", OtherKey="Id", IsForeignKey=true)]
		public Week Week
		{
			get
			{
				return this._Week.Entity;
			}
			set
			{
				Week previousValue = this._Week.Entity;
				if (((previousValue != value) 
							|| (this._Week.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Week.Entity = null;
						previousValue.Games.Remove(this);
					}
					this._Week.Entity = value;
					if ((value != null))
					{
						value.Games.Add(this);
						this._WeekId = value.Id;
					}
					else
					{
						this._WeekId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Week");
				}
			}
		}
		
		[Association(Name="ProTeam_Game", Storage="_ProTeam", ThisKey="AwayTeamId", OtherKey="Id", IsForeignKey=true)]
		public ProTeam ProTeam
		{
			get
			{
				return this._ProTeam.Entity;
			}
			set
			{
				ProTeam previousValue = this._ProTeam.Entity;
				if (((previousValue != value) 
							|| (this._ProTeam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProTeam.Entity = null;
						previousValue.Games.Remove(this);
					}
					this._ProTeam.Entity = value;
					if ((value != null))
					{
						value.Games.Add(this);
						this._AwayTeamId = value.Id;
					}
					else
					{
						this._AwayTeamId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProTeam");
				}
			}
		}
		
		[Association(Name="ProTeam_Game1", Storage="_ProTeam1", ThisKey="HomeTeamId", OtherKey="Id", IsForeignKey=true)]
		public ProTeam ProTeam1
		{
			get
			{
				return this._ProTeam1.Entity;
			}
			set
			{
				ProTeam previousValue = this._ProTeam1.Entity;
				if (((previousValue != value) 
							|| (this._ProTeam1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProTeam1.Entity = null;
						previousValue.Games1.Remove(this);
					}
					this._ProTeam1.Entity = value;
					if ((value != null))
					{
						value.Games1.Add(this);
						this._HomeTeamId = value.Id;
					}
					else
					{
						this._HomeTeamId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProTeam1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Picks(Pick entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Picks(Pick entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
	}
	
	[Table(Name="dbo.Week")]
	public partial class Week : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Game> _Games;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Week()
		{
			this._Games = new EntitySet<Game>(new Action<Game>(this.attach_Games), new Action<Game>(this.detach_Games));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Week_Game", Storage="_Games", ThisKey="Id", OtherKey="WeekId")]
		public EntitySet<Game> Games
		{
			get
			{
				return this._Games;
			}
			set
			{
				this._Games.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Week = this;
		}
		
		private void detach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.Week = null;
		}
	}
	
	[Table(Name="dbo.League")]
	public partial class League : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<TeaserTeam> _TeaserTeams;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public League()
		{
			this._TeaserTeams = new EntitySet<TeaserTeam>(new Action<TeaserTeam>(this.attach_TeaserTeams), new Action<TeaserTeam>(this.detach_TeaserTeams));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="League_TeaserTeam", Storage="_TeaserTeams", ThisKey="Id", OtherKey="LeagueId")]
		public EntitySet<TeaserTeam> TeaserTeams
		{
			get
			{
				return this._TeaserTeams;
			}
			set
			{
				this._TeaserTeams.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TeaserTeams(TeaserTeam entity)
		{
			this.SendPropertyChanging();
			entity.League = this;
		}
		
		private void detach_TeaserTeams(TeaserTeam entity)
		{
			this.SendPropertyChanging();
			entity.League = null;
		}
	}
	
	[Table(Name="dbo.Pick")]
	public partial class Pick : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _GameId;
		
		private System.Nullable<int> _TeaserTeamId;
		
		private System.Nullable<int> _ProTeamId;
		
		private EntityRef<Game> _Game;
		
		private EntityRef<ProTeam> _ProTeam;
		
		private EntityRef<TeaserTeam> _TeaserTeam;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGameIdChanging(System.Nullable<int> value);
    partial void OnGameIdChanged();
    partial void OnTeaserTeamIdChanging(System.Nullable<int> value);
    partial void OnTeaserTeamIdChanged();
    partial void OnProTeamIdChanging(System.Nullable<int> value);
    partial void OnProTeamIdChanged();
    #endregion
		
		public Pick()
		{
			this._Game = default(EntityRef<Game>);
			this._ProTeam = default(EntityRef<ProTeam>);
			this._TeaserTeam = default(EntityRef<TeaserTeam>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_GameId", DbType="Int")]
		public System.Nullable<int> GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[Column(Storage="_TeaserTeamId", DbType="Int")]
		public System.Nullable<int> TeaserTeamId
		{
			get
			{
				return this._TeaserTeamId;
			}
			set
			{
				if ((this._TeaserTeamId != value))
				{
					if (this._TeaserTeam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeaserTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeaserTeamId = value;
					this.SendPropertyChanged("TeaserTeamId");
					this.OnTeaserTeamIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProTeamId", DbType="Int")]
		public System.Nullable<int> ProTeamId
		{
			get
			{
				return this._ProTeamId;
			}
			set
			{
				if ((this._ProTeamId != value))
				{
					if (this._ProTeam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProTeamIdChanging(value);
					this.SendPropertyChanging();
					this._ProTeamId = value;
					this.SendPropertyChanged("ProTeamId");
					this.OnProTeamIdChanged();
				}
			}
		}
		
		[Association(Name="Game_Pick", Storage="_Game", ThisKey="GameId", OtherKey="Id", IsForeignKey=true)]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Picks.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Picks.Add(this);
						this._GameId = value.Id;
					}
					else
					{
						this._GameId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		[Association(Name="ProTeam_Pick", Storage="_ProTeam", ThisKey="ProTeamId", OtherKey="Id", IsForeignKey=true)]
		public ProTeam ProTeam
		{
			get
			{
				return this._ProTeam.Entity;
			}
			set
			{
				ProTeam previousValue = this._ProTeam.Entity;
				if (((previousValue != value) 
							|| (this._ProTeam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProTeam.Entity = null;
						previousValue.Picks.Remove(this);
					}
					this._ProTeam.Entity = value;
					if ((value != null))
					{
						value.Picks.Add(this);
						this._ProTeamId = value.Id;
					}
					else
					{
						this._ProTeamId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProTeam");
				}
			}
		}
		
		[Association(Name="TeaserTeam_Pick", Storage="_TeaserTeam", ThisKey="TeaserTeamId", OtherKey="Id", IsForeignKey=true)]
		public TeaserTeam TeaserTeam
		{
			get
			{
				return this._TeaserTeam.Entity;
			}
			set
			{
				TeaserTeam previousValue = this._TeaserTeam.Entity;
				if (((previousValue != value) 
							|| (this._TeaserTeam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeaserTeam.Entity = null;
						previousValue.Picks.Remove(this);
					}
					this._TeaserTeam.Entity = value;
					if ((value != null))
					{
						value.Picks.Add(this);
						this._TeaserTeamId = value.Id;
					}
					else
					{
						this._TeaserTeamId = default(Nullable<int>);
					}
					this.SendPropertyChanged("TeaserTeam");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ProTeam")]
	public partial class ProTeam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _City;
		
		private string _Name;
		
		private EntitySet<Game> _Games;
		
		private EntitySet<Game> _Games1;
		
		private EntitySet<Pick> _Picks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ProTeam()
		{
			this._Games = new EntitySet<Game>(new Action<Game>(this.attach_Games), new Action<Game>(this.detach_Games));
			this._Games1 = new EntitySet<Game>(new Action<Game>(this.attach_Games1), new Action<Game>(this.detach_Games1));
			this._Picks = new EntitySet<Pick>(new Action<Pick>(this.attach_Picks), new Action<Pick>(this.detach_Picks));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_City", DbType="NVarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="ProTeam_Game", Storage="_Games", ThisKey="Id", OtherKey="AwayTeamId")]
		public EntitySet<Game> Games
		{
			get
			{
				return this._Games;
			}
			set
			{
				this._Games.Assign(value);
			}
		}
		
		[Association(Name="ProTeam_Game1", Storage="_Games1", ThisKey="Id", OtherKey="HomeTeamId")]
		public EntitySet<Game> Games1
		{
			get
			{
				return this._Games1;
			}
			set
			{
				this._Games1.Assign(value);
			}
		}
		
		[Association(Name="ProTeam_Pick", Storage="_Picks", ThisKey="Id", OtherKey="ProTeamId")]
		public EntitySet<Pick> Picks
		{
			get
			{
				return this._Picks;
			}
			set
			{
				this._Picks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.ProTeam = this;
		}
		
		private void detach_Games(Game entity)
		{
			this.SendPropertyChanging();
			entity.ProTeam = null;
		}
		
		private void attach_Games1(Game entity)
		{
			this.SendPropertyChanging();
			entity.ProTeam1 = this;
		}
		
		private void detach_Games1(Game entity)
		{
			this.SendPropertyChanging();
			entity.ProTeam1 = null;
		}
		
		private void attach_Picks(Pick entity)
		{
			this.SendPropertyChanging();
			entity.ProTeam = this;
		}
		
		private void detach_Picks(Pick entity)
		{
			this.SendPropertyChanging();
			entity.ProTeam = null;
		}
	}
	
	[Table(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<SiteUser_Role> _SiteUser_Roles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Role()
		{
			this._SiteUser_Roles = new EntitySet<SiteUser_Role>(new Action<SiteUser_Role>(this.attach_SiteUser_Roles), new Action<SiteUser_Role>(this.detach_SiteUser_Roles));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="Role_SiteUser_Role", Storage="_SiteUser_Roles", ThisKey="Id", OtherKey="RoleId")]
		public EntitySet<SiteUser_Role> SiteUser_Roles
		{
			get
			{
				return this._SiteUser_Roles;
			}
			set
			{
				this._SiteUser_Roles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SiteUser_Roles(SiteUser_Role entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_SiteUser_Roles(SiteUser_Role entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[Table(Name="dbo.RpxUser")]
	public partial class RpxUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _SiteUserId;
		
		private string _Identifier;
		
		private string _Email;
		
		private string _DisplayName;
		
		private string _JsonData;
		
		private EntityRef<SiteUser> _SiteUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSiteUserIdChanging(System.Nullable<int> value);
    partial void OnSiteUserIdChanged();
    partial void OnIdentifierChanging(string value);
    partial void OnIdentifierChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnJsonDataChanging(string value);
    partial void OnJsonDataChanged();
    #endregion
		
		public RpxUser()
		{
			this._SiteUser = default(EntityRef<SiteUser>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SiteUserId", DbType="Int")]
		public System.Nullable<int> SiteUserId
		{
			get
			{
				return this._SiteUserId;
			}
			set
			{
				if ((this._SiteUserId != value))
				{
					if (this._SiteUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSiteUserIdChanging(value);
					this.SendPropertyChanging();
					this._SiteUserId = value;
					this.SendPropertyChanged("SiteUserId");
					this.OnSiteUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Identifier", DbType="VarChar(255)")]
		public string Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this.OnIdentifierChanging(value);
					this.SendPropertyChanging();
					this._Identifier = value;
					this.SendPropertyChanged("Identifier");
					this.OnIdentifierChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(255)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_DisplayName", DbType="VarChar(255)")]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[Column(Storage="_JsonData", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string JsonData
		{
			get
			{
				return this._JsonData;
			}
			set
			{
				if ((this._JsonData != value))
				{
					this.OnJsonDataChanging(value);
					this.SendPropertyChanging();
					this._JsonData = value;
					this.SendPropertyChanged("JsonData");
					this.OnJsonDataChanged();
				}
			}
		}
		
		[Association(Name="SiteUser_RpxUser", Storage="_SiteUser", ThisKey="SiteUserId", OtherKey="Id", IsForeignKey=true)]
		public SiteUser SiteUser
		{
			get
			{
				return this._SiteUser.Entity;
			}
			set
			{
				SiteUser previousValue = this._SiteUser.Entity;
				if (((previousValue != value) 
							|| (this._SiteUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SiteUser.Entity = null;
						previousValue.RpxUsers.Remove(this);
					}
					this._SiteUser.Entity = value;
					if ((value != null))
					{
						value.RpxUsers.Add(this);
						this._SiteUserId = value.Id;
					}
					else
					{
						this._SiteUserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SiteUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SiteUser")]
	public partial class SiteUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<RpxUser> _RpxUsers;
		
		private EntitySet<SiteUser_Role> _SiteUser_Roles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public SiteUser()
		{
			this._RpxUsers = new EntitySet<RpxUser>(new Action<RpxUser>(this.attach_RpxUsers), new Action<RpxUser>(this.detach_RpxUsers));
			this._SiteUser_Roles = new EntitySet<SiteUser_Role>(new Action<SiteUser_Role>(this.attach_SiteUser_Roles), new Action<SiteUser_Role>(this.detach_SiteUser_Roles));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="SiteUser_RpxUser", Storage="_RpxUsers", ThisKey="Id", OtherKey="SiteUserId")]
		public EntitySet<RpxUser> RpxUsers
		{
			get
			{
				return this._RpxUsers;
			}
			set
			{
				this._RpxUsers.Assign(value);
			}
		}
		
		[Association(Name="SiteUser_SiteUser_Role", Storage="_SiteUser_Roles", ThisKey="Id", OtherKey="SiteUserId")]
		public EntitySet<SiteUser_Role> SiteUser_Roles
		{
			get
			{
				return this._SiteUser_Roles;
			}
			set
			{
				this._SiteUser_Roles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RpxUsers(RpxUser entity)
		{
			this.SendPropertyChanging();
			entity.SiteUser = this;
		}
		
		private void detach_RpxUsers(RpxUser entity)
		{
			this.SendPropertyChanging();
			entity.SiteUser = null;
		}
		
		private void attach_SiteUser_Roles(SiteUser_Role entity)
		{
			this.SendPropertyChanging();
			entity.SiteUser = this;
		}
		
		private void detach_SiteUser_Roles(SiteUser_Role entity)
		{
			this.SendPropertyChanging();
			entity.SiteUser = null;
		}
	}
	
	[Table(Name="dbo.SiteUser_Role")]
	public partial class SiteUser_Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _SiteUserId;
		
		private System.Nullable<int> _RoleId;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<SiteUser> _SiteUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSiteUserIdChanging(System.Nullable<int> value);
    partial void OnSiteUserIdChanged();
    partial void OnRoleIdChanging(System.Nullable<int> value);
    partial void OnRoleIdChanged();
    #endregion
		
		public SiteUser_Role()
		{
			this._Role = default(EntityRef<Role>);
			this._SiteUser = default(EntityRef<SiteUser>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SiteUserId", DbType="Int")]
		public System.Nullable<int> SiteUserId
		{
			get
			{
				return this._SiteUserId;
			}
			set
			{
				if ((this._SiteUserId != value))
				{
					if (this._SiteUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSiteUserIdChanging(value);
					this.SendPropertyChanging();
					this._SiteUserId = value;
					this.SendPropertyChanged("SiteUserId");
					this.OnSiteUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_RoleId", DbType="Int")]
		public System.Nullable<int> RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[Association(Name="Role_SiteUser_Role", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.SiteUser_Roles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.SiteUser_Roles.Add(this);
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[Association(Name="SiteUser_SiteUser_Role", Storage="_SiteUser", ThisKey="SiteUserId", OtherKey="Id", IsForeignKey=true)]
		public SiteUser SiteUser
		{
			get
			{
				return this._SiteUser.Entity;
			}
			set
			{
				SiteUser previousValue = this._SiteUser.Entity;
				if (((previousValue != value) 
							|| (this._SiteUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SiteUser.Entity = null;
						previousValue.SiteUser_Roles.Remove(this);
					}
					this._SiteUser.Entity = value;
					if ((value != null))
					{
						value.SiteUser_Roles.Add(this);
						this._SiteUserId = value.Id;
					}
					else
					{
						this._SiteUserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SiteUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TeaserTeam")]
	public partial class TeaserTeam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _LeagueId;
		
		private string _Name;
		
		private EntitySet<Pick> _Picks;
		
		private EntityRef<League> _League;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLeagueIdChanging(System.Nullable<int> value);
    partial void OnLeagueIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public TeaserTeam()
		{
			this._Picks = new EntitySet<Pick>(new Action<Pick>(this.attach_Picks), new Action<Pick>(this.detach_Picks));
			this._League = default(EntityRef<League>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_LeagueId", DbType="Int")]
		public System.Nullable<int> LeagueId
		{
			get
			{
				return this._LeagueId;
			}
			set
			{
				if ((this._LeagueId != value))
				{
					if (this._League.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueIdChanging(value);
					this.SendPropertyChanging();
					this._LeagueId = value;
					this.SendPropertyChanged("LeagueId");
					this.OnLeagueIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="TeaserTeam_Pick", Storage="_Picks", ThisKey="Id", OtherKey="TeaserTeamId")]
		public EntitySet<Pick> Picks
		{
			get
			{
				return this._Picks;
			}
			set
			{
				this._Picks.Assign(value);
			}
		}
		
		[Association(Name="League_TeaserTeam", Storage="_League", ThisKey="LeagueId", OtherKey="Id", IsForeignKey=true)]
		public League League
		{
			get
			{
				return this._League.Entity;
			}
			set
			{
				League previousValue = this._League.Entity;
				if (((previousValue != value) 
							|| (this._League.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._League.Entity = null;
						previousValue.TeaserTeams.Remove(this);
					}
					this._League.Entity = value;
					if ((value != null))
					{
						value.TeaserTeams.Add(this);
						this._LeagueId = value.Id;
					}
					else
					{
						this._LeagueId = default(Nullable<int>);
					}
					this.SendPropertyChanged("League");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Picks(Pick entity)
		{
			this.SendPropertyChanging();
			entity.TeaserTeam = this;
		}
		
		private void detach_Picks(Pick entity)
		{
			this.SendPropertyChanging();
			entity.TeaserTeam = null;
		}
	}
}
#pragma warning restore 1591
